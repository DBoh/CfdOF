%[_header%]
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     %(solver/SolverName%);

startFrom       startTime;

startTime       0;

stopAt          endTime;

%{%(physics/Time%)
%:Steady
deltaT          1;

endTime         %(solver/MaxIterations%);

writeControl    timeStep;

writeInterval   %(solver/SteadyWriteInterval%);

purgeWrite      0;

%:Transient
deltaT          %(solver/TimeStep%);

endTime         %(solver/EndTime%);

writeControl    adjustableRunTime;

writeInterval   %(solver/TransientWriteInterval%);

purgeWrite      0;

%{%(solver/SolverName%)
%:hisa
adjustTimeStep  no;
%:default
adjustTimeStep  yes;
%}

maxCo           5;

%}
%{%(solver/SolverName%)
%:interFoam multiphaseInterFoam
maxAlphaCo      5;

%}
writeFormat     ascii;

writePrecision  8;

runTimeModifiable true;

libs
(
    // Needed for availability of porous baffle boundary in potentialFoam
    #include "turbulenceLib"
%{%(solver/SolverName%)
%:hisa
    // Needed for availability of boundary conditions in potentialFoam
    "libhisaFiniteVolume.so"
%}
);

functions
{

%{%(functionObjects%)
%{%(functionObjects/%(0%)/FunctionObjectType%)
%:Force
    %(0%)
    {
        type                forces;
        libs                ("libforces.so");
        patches             ( %(functionObjects/%(0%)/PatchName%) );

		p                   %(functionObjects/%(0%)/Pressure%);
		U                   %(functionObjects/%(0%)/Velocity%);
%{%(physics/Flow%)
%:Compressible HighMachCompressible
        rho                 %(functionObjects/%(0%)/Density%);
%:default
        rho                 rhoInf;
%}
        rhoInf              100000;

		pRef                %(functionObjects/%(0%)/ReferencePressure%);
%{%(functionObjects/%(0%)/IncludePorosity%)
%:True
		porosity            true;
%:False
        porosity            false;
%}
%{%(functionObjects/%(0%)/WriteFields%)
%:True
		writeFields         true;
%:False
		writeFields         false;
%}
		CofR                (%(functionObjects/%(0%)/CoRx%) %(functionObjects/%(0%)/CoRy%) %(functionObjects/%(0%)/CoRz%));

        //binData
        //{
        //    nBin          %(functionObjects/%(0%)/NBins%);
        //    direction     ( %(functionObjects/%(0%)/Direction%) );
        //   cumulative     %(functionObjects/%(0%)/Cumulative%);
        //}
    }
%:ForceCoefficients
    %(0%)
    {
        type                forceCoeffs;
        libs                ("libforces.so");
        patches             ( %(functionObjects/%(0%)/PatchName%) );

        p                   %(functionObjects/%(0%)/Pressure%);
		U                   %(functionObjects/%(0%)/Velocity%);
%{%(physics/Flow%)
%:Compressible HighMachCompressible
        rho                 %(functionObjects/%(0%)/Density%);
%:default
        rho                 rhoInf;
%}
        rhoInf              100000;

		pRef                %(functionObjects/%(0%)/ReferencePressure%);

%{%(functionObjects/%(0%)/IncludePorosity%)
%:True
		porosity            true;
%:False
        porosity            false;
%}
%{%(functionObjects/%(0%)/WriteFields%)
%:True
		writeFields         true;
%:False
		writeFields         false;
%}

		CofR                ( %(functionObjects/%(0%)/CoRx%) %(functionObjects/%(0%)/CoRy%) %(functionObjects/%(0%)/CoRz%) );
        liftDir             ( %(functionObjects/%(0%)/Liftx%) %(functionObjects/%(0%)/Lifty%) %(functionObjects/%(0%)/Liftz%));
        dragDir             ( %(functionObjects/%(0%)/Dragx%) %(functionObjects/%(0%)/Dragy%) %(functionObjects/%(0%)/Dragz%) );
        pitchAxis           ( %(functionObjects/%(0%)/Pitchx%) %(functionObjects/%(0%)/Pitchy%) %(functionObjects/%(0%)/Pitchz%) );

        magUInf             %(functionObjects/%(0%)/MagnitudeUInf%);

        lRef                %(functionObjects/%(0%)/LengthRef%);
        Aref                %(functionObjects/%(0%)/AreaRef%);

        //binData
        //{
        //    nBin          %(functionObjects/%(0%)/NBins%);
        //    direction     ( %(functionObjects/%(0%)/Direction%) );
        //    cumulative    %(functionObjects/%(0%)/Cumulative%);
        //}
    }
%}
%}
}
// ************************************************************************* //
